version: "3.9"

name: services-gateway-storage

# Example API for images
services:
  postgresql.service:
    build:
      context: postgresql/
      dockerfile: postgres.Dockerfile
    container_name: ${POSTGRES_HOST}
    image: ${POSTGRES_HOST}
    restart: ${GENERIC_RESTART}
    volumes:
      - volume_postgres:/var/lib/postgresql/data
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - shared_network



  s3.storage:
    image: ${S3_IMAGE}
    container_name: ${S3_HOST}
    restart: ${GENERIC_RESTART}
    command:
      - "server"
      - "/data"
      - "--console-address=:${S3_CONSOLE_PORT}"
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/9000; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      MINIO_ROOT_USER: ${S3_USER}
      MINIO_ROOT_PASSWORD: ${S3_PASSWORD}
      # MINIO_BROWSER_REDIRECT_URL: ${S3_CONSOLE_BROWSER_REDIRECT_URL}
    volumes:
      - volume_s3:/data
    ports:
      - ${S3_EXTERNAL_PORT}:9000
      - ${S3_CONSOLE_EXTERNAL_PORT}:${S3_CONSOLE_PORT}
    networks:
      - shared_network

  s3.client:
    image: ${S3_CLIENT_IMAGE}
    container_name: ${S3_CLIENT_HOST}
    depends_on:
      s3.storage:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set s3_minio_server http://s3.storage:9000 ${S3_CLIENT_ACCESS_KEY} ${S3_CLIENT_SECRET_KEY};
      /usr/bin/mc mb s3_minio_server/${S3_CLIENT_BUCKET_NAME} || true;
      exit 0;
      "
    networks:
      - shared_network

  s3.gateway.rs:
    image: ${S3_GATEWAY_RS_IMAGE}
    container_name: ${S3_GATEWAY_RS_HOST}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/7878; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    depends_on:
      s3.storage:
        condition: service_healthy
    environment:
      S3_URL: ${S3_GATEWAY_RS_S3_URL}
      API_KEY: ${S3_GATEWAY_RS_API_KEY}
      SECRET_KEY: ${S3_GATEWAY_RS_SECRET_KEY}
      BUCKET_NAME: ${S3_GATEWAY_RS_BUCKET_NAME}
      # ALLOWED_ORIGIN: ${ALLOWED_ORIGIN}
    ports:
      - ${S3_GATEWAY_RS_PORT}:7878
    networks:
      - shared_network



  adempiere.grpc.server:
    image: ${GRPC_SERVER_IMAGE}
    container_name: ${GRPC_SERVER_HOST}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/${GRPC_SERVER_PORT}; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    depends_on:
      postgresql.service:
        condition: service_healthy
    environment:
      SERVER_PORT: ${GRPC_SERVER_PORT}
      DB_HOST: ${GRPC_SERVER_DB_HOST}
      DB_PORT: ${GRPC_SERVER_DB_PORT}
      DB_NAME: ${GRPC_SERVER_DB_NAME}
      DB_USER: ${GRPC_SERVER_DB_USER}
      DB_PASSWORD: ${GRPC_SERVER_DB_PASSWORD}
      JWT_SECRET_KEY: ${GRPC_SERVER_JWT_SECRET_KEY}
      # - SERVICES_ENABLED: ${GRPC_SERVER_SERVICES_ENABLED}
    networks:
      - shared_network

  grpc.proxy:
    image: ${GRPC_PROXY_BACKEND_IMAGE}
    container_name: ${GRPC_PROXY_HOST}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/${GRPC_PROXY_BACKEND_PORT}; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      SERVER_PORT: ${GRPC_PROXY_BACKEND_PORT}
      BACKEND_HOST: ${GRPC_PROXY_BACKEND_HOST}
      BACKEND_PORT: ${GRPC_PROXY_BACKEND_SERVER_PORT}
    depends_on:
      adempiere.grpc.server:
        condition: service_healthy
    networks:
    - shared_network



  ui.gateway:
    image: ${GATEWAY_IMAGE}
    container_name: ${GATEWAY_HOST}
    depends_on:
      grpc.proxy:
        condition: service_healthy
      s3.gateway.rs:
        condition: service_started
    ports:
      - ${GATEWAY_PORT}:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/api_json_errors.conf:/etc/nginx/api_json_errors.conf
      - ./nginx/gateway/api_gateway_storage.conf:/etc/nginx/api_gateway.conf
      #- ./keys/api_keys.conf:/etc/nginx/api_keys.conf
      # backend
      - ./nginx/upstreams/adempiere_backend.conf:/etc/nginx/api_upstreams_conf.d/adempiere_backend.conf
      - ./nginx/api/backend/:/etc/nginx/api_conf.d/backend/
      # s3
      - ./nginx/upstreams/s3_storage.conf:/etc/nginx/api_upstreams_conf.d/s3_storage.conf
      - ./nginx/upstreams/s3_console_ui.conf:/etc/nginx/api_upstreams_conf.d/s3_console_ui.conf
      - ./nginx/upstreams/s3_gateway_rs.conf:/etc/nginx/api_upstreams_conf.d/s3_gateway_rs.conf
      - ./nginx/api/s3/:/etc/nginx/api_conf.d/s3/
    networks:
      - shared_network



networks:
  shared_network:
    name: ${DEFAULT_NETWORK}

volumes:
  volume_postgres:
    name: ${POSTGRES_VOLUME}
  volume_s3:
    name: ${S3_VOLUME}
