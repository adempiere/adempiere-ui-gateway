version: "3.9"

name: services-gateway-auth

# Example API for images
services:
  postgresql.service:
    build:
      context: postgresql/
      dockerfile: postgres.Dockerfile
    container_name: ${POSTGRES_HOST}
    image: ${POSTGRES_HOST}
    restart: ${GENERIC_RESTART}
    volumes:
      - volume_postgres:/var/lib/postgresql/data
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - shared_network
  
  adempiere.site:
    image: ${ADEMPIERE_SITE_IMAGE}
    container_name: ${ADEMPIERE_SITE_HOST}
    restart: ${GENERIC_RESTART}
    # ports:
    #   - ${ADEMPIERE_SITE_PORT}:80
    environment:
      ZK_HOST: ${ADEMPIERE_SITE_ZK_HOST}
      VUE_HOST: ${ADEMPIERE_SITE_VUE_HOST}
      SCHEDULER_HOST: ${ADEMPIERE_SITE_SCHEDULER_HOST}
    networks:
      - shared_network
  
  adempiere.zk:
    image: ${ADEMPIERE_ZK_IMAGE}
    container_name: ${ADEMPIERE_ZK_HOST}
    restart: ${GENERIC_RESTART}
    # ports:
    #   - ${ADEMPIERE_ZK_PORT}:8080
    environment:
      ADEMPIERE_DB_SERVER: ${ADEMPIERE_ZK_DB_HOST}
      ADEMPIERE_DB_NAME: ${ADEMPIERE_ZK_DB_NAME}
      ADEMPIERE_DB_USER: ${ADEMPIERE_ZK_DB_USER}
      ADEMPIERE_DB_PASSWORD: ${ADEMPIERE_ZK_DB_PASSWORD}
    depends_on:
      postgresql.service:
        condition: service_healthy
    networks:
      - shared_network 

  adempiere.grpc.server:
    image: ${GRPC_SERVER_IMAGE}
    container_name: ${GRPC_SERVER_HOST}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/50059; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    depends_on:
      postgresql.service:
        condition: service_healthy
    environment:
      DB_HOST: ${GRPC_SERVER_DB_HOST}
      DB_PORT: ${GRPC_SERVER_DB_PORT}
      DB_NAME: ${GRPC_SERVER_DB_NAME}
      DB_USER: ${GRPC_SERVER_DB_USER}
      DB_PASSWORD: ${GRPC_SERVER_DB_PASSWORD}
      JWT_SECRET_KEY: ${GRPC_SERVER_JWT_SECRET_KEY}
      # SERVICES_ENABLED: ${GRPC_SERVER_SERVICES_ENABLED}
    networks:
      - shared_network

  adempiere.processor:
    image: ${ADEMPIERE_PROCESSOR_IMAGE}
    container_name: ${ADEMPIERE_PROCESSOR_HOST}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/50059; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      DB_HOST: ${ADEMPIERE_PROCESSOR_DB_HOST}
      DB_PORT: ${ADEMPIERE_PROCESSOR_DB_PORT}
      DB_NAME: ${ADEMPIERE_PROCESSOR_DB_NAME}
      DB_USER: ${ADEMPIERE_PROCESSOR_DB_USER}
      DB_PASSWORD: ${ADEMPIERE_PROCESSOR_DB_PASSWORD}
      SERVER_PORT: ${ADEMPIERE_PROCESSOR_PORT}
    depends_on:
      postgresql.service:
        condition: service_healthy
    networks:
      - shared_network

  grpc.proxy:
    image: ${GRPC_PROXY_IMAGE}
    container_name: ${GRPC_PROXY_HOST}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5555; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    ports:
     - ${GRPC_PROXY_BACKEND_PORT}:5555
    # Processor Port
    #  - ${GRPC_PROXY_PROCESSOR_PORT}:5556
    volumes:
      - ./envoy/envoy.yaml:/etc/envoy/envoy.yaml:ro
      - ./envoy/definitions/adempiere-grpc-server.pb:/data/adempiere-grpc-server.pb:ro
      - ./envoy/definitions/adempiere-processors-service-service.pb:/data/adempiere-processors-service-service.pb:ro
    depends_on:
      - adempiere.grpc.server
      - adempiere.processor
    networks:
    - shared_network

  s3.service:
    image: ${S3_IMAGE}
    container_name: ${S3_HOST}
    restart: ${GENERIC_RESTART}
    ports:
      - ${S3_PORT}:9000
      - ${S3_CONSOLE_PORT}:9090
    command:
      - "server"
      - "/data"
      - "--console-address=:9090"
    environment:
      MINIO_ROOT_USER: ${S3_USER}
      MINIO_ROOT_PASSWORD: ${S3_PASSWORD}
    volumes:
      - volume_s3:/data
    networks:
      - shared_network

  vue.ui:
    image: ${VUE_UI_IMAGE}
    container_name: ${VUE_UI_HOST}
    restart: ${GENERIC_RESTART}
    # ports:
    #   - ${VUE_UI_PORT}:80
    environment:
      API_URL: ${VUE_UI_API_URL}
      PUBLIC_PATH: ${VUE_UI_PUBLIC_PATH}
    networks:
      - shared_network

  dkron.scheduler:
    image: ${DKRON_IMAGE}
    container_name: ${DKRON_HOST}
    restart: ${GENERIC_RESTART}
    # ports:
    #   - ${DKRON_PORT}:8080
    command:
      - "agent"
      - "--bootstrap-expect=1"
      - "--node-name=node1"
      - "--server"
      - "--ui=true"
    volumes:
      - volume_dkron:/dkron.data
    networks:
      - shared_network
  
  opensearch-node:
    image: ${OPENSEARCH_IMAGE}
    container_name: ${OPENSEARCH_HOST}
    environment:
      - node.name=opensearch-node
      - discovery.type=single-node
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/9200; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s 
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - volume_opensearch:/usr/share/opensearch/data
      - ./opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - ./opensearch/snapshots:/mnt/snapshots
    # ports:
    #   - ${OPENSEARCH_PORT}:9200
    #   - ${OPENSEARCH_PERFORMANCE_PORT}:9600 # required for Performance Analyzer
    networks:
      - shared_network
  
  open-search-setup:
    build:
      context: opensearch/
      dockerfile: setup.Dockerfile
    container_name: ${OPENSEARCH_SETUP_HOST}
    image: ${OPENSEARCH_SETUP_HOST}
    depends_on:
       opensearch-node:
        condition: service_healthy
    networks:
      - shared_network

  zookeeper:
    image: ${ZOOKEEPER_IMAGE}
    container_name: ${ZOOKEEPER_HOST}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    # ports:
    #   - ${ZOOKEEPER_PORT}:2181
    networks:
      - shared_network
  
  kafka:
    image: ${KAFKA_IMAGE}
    container_name: ${KAFKA_HOST}
    depends_on:
      - zookeeper
    # ports:
    #   - ${KAFKA_PORT}:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://${KAFKA_BROKER_HOST}:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - shared_network

  opensearch.gateway.rs:
    image: ${OPENSEARCH_GATEWAY_RS_IMAGE}
    container_name: ${OPENSEARCH_GATEWAY_RS_HOST}
    restart: ${GENERIC_RESTART}
    environment:
      KAFKA_HOST: ${OPENSEARCH_GATEWAY_RS_KAFKA_HOST}
      OPENSEARCH_URL: ${OPENSEARCH_GATEWAY_RS_OPENSEARCH_URL}
    depends_on:
       opensearch-node:
        condition: service_healthy
    # ports:
    #   - ${OPENSEARCH_GATEWAY_RS_PORT}:7878
    networks:
      - shared_network

  keycloak:
    image: ${KEYCLOAK_IMAGE}
    container_name: ${KEYCLOAK_NAME}
    restart: ${GENERIC_RESTART}
    environment:
      DB_VENDOR: ${KEYCLOAK_DB_VENDOR}
      DB_ADDR: ${POSTGRES_HOST}
      DB_DATABASE: ${KEYCLOAK_DB_DATABASE}
      DB_USER: ${POSTGRES_USER}
      DB_SCHEMA: ${KEYCLOAK_DB_SCHEMA}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    depends_on:
      postgresql.service:
        condition: service_healthy
    command: "start-dev --import-realm"
    ports:
      - ${KEYCLOAK_PORT}:8080
    volumes:
      - ./keycloak/master-realm.json:/opt/keycloak/data/import/master-realm.json
      - ./keycloak/adempiere-realm.json:/opt/keycloak/data/import/adempiere-realm.json
    networks:
      - shared_network
  
  ui.gateway:
    image: ${GATEWAY_IMAGE}
    container_name: ${GATEWAY_HOST}
    depends_on:
      grpc.proxy:
        condition: service_healthy
      # vue.ui:
      #   condition: service_healthy
      opensearch.gateway.rs:
        condition: service_started
      adempiere.site:
        condition: service_started
    ports:
      - ${GATEWAY_PORT}:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/upstreams/:/etc/nginx/api_upstreams_conf.d
      - ./nginx/api/:/etc/nginx/api_conf.d
      - ./nginx/gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      - ./nginx/api_json_errors.conf:/etc/nginx/api_json_errors.conf
      #- ./keys/api_keys.conf:/etc/nginx/api_keys.conf
    networks:
      - shared_network

networks:
  shared_network:
    name: ${DEFAULT_NETWORK}

volumes:
  volume_postgres:
    name: ${POSTGRES_VOLUME}
  volume_dkron:
    name: ${DKRON_VOLUME}
  volume_s3:
    name: ${S3_VOLUME}
  volume_opensearch:
    name: ${OPENSEARCH_VOLUME}