version: "3.9"

name: services-gateway-develop

# Example API for images
services:
  postgresql.service:
    build:
      context: postgresql/
      dockerfile: postgres.Dockerfile
    container_name: ${POSTGRES_HOST}
    image: ${POSTGRES_HOST}
    restart: ${GENERIC_RESTART}
    volumes:
      - volume_postgres:/var/lib/postgresql/data
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5432; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - shared_network

  adempiere.grpc.server:
    image: ${GRPC_SERVER_IMAGE}
    container_name: ${GRPC_SERVER_HOST}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/${GRPC_SERVER_PORT}; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    depends_on:
      postgresql.service:
        condition: service_healthy
    environment:
      SERVER_PORT: ${GRPC_SERVER_PORT}
      DB_HOST: ${GRPC_SERVER_DB_HOST}
      DB_PORT: ${GRPC_SERVER_DB_PORT}
      DB_NAME: ${GRPC_SERVER_DB_NAME}
      DB_USER: ${GRPC_SERVER_DB_USER}
      DB_PASSWORD: ${GRPC_SERVER_DB_PASSWORD}
      JWT_SECRET_KEY: ${GRPC_SERVER_JWT_SECRET_KEY}
      # SERVICES_ENABLED: ${GRPC_SERVER_SERVICES_ENABLED}
    networks:
      - shared_network

  grpc.proxy:
    image: ${GRPC_PROXY_BACKEND_IMAGE}
    container_name: ${GRPC_PROXY_HOST}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/${GRPC_PROXY_BACKEND_PORT}; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      SERVER_PORT: ${GRPC_PROXY_BACKEND_PORT}
      BACKEND_HOST: ${GRPC_PROXY_BACKEND_HOST}
      BACKEND_PORT: ${GRPC_PROXY_BACKEND_SERVER_PORT}
    depends_on:
      - adempiere.grpc.server
    networks:
    - shared_network

  zookeeper:
    image: ${ZOOKEEPER_IMAGE}
    container_name: ${ZOOKEEPER_HOST}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/${ZOOKEEPER_PORT}; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    # ports:
    #   - ${ZOOKEEPER_PORT}:2181
    networks:
      - shared_network

  kafka:
    image: ${KAFKA_IMAGE}
    container_name: ${KAFKA_HOST}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/29092; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - ${KAFKA_EXTERNAL_PORT}:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://${KAFKA_BROKER_HOST}:${KAFKA_EXTERNAL_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - shared_network

  opensearch-node:
    image: ${OPENSEARCH_IMAGE}
    container_name: ${OPENSEARCH_HOST}
    environment:
      - node.name=opensearch-node
      - discovery.type=single-node
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/9200; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - volume_opensearch:/usr/share/opensearch/data
      - ./opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - ./opensearch/snapshots:/mnt/snapshots
    ports:
      - ${OPENSEARCH_PORT}:9200
      - ${OPENSEARCH_PERFORMANCE_PORT}:9600 # required for Performance Analyzer
    networks:
      - shared_network

  open-search-setup:
    build:
      context: opensearch/
      dockerfile: setup.Dockerfile
    container_name: ${OPENSEARCH_SETUP_HOST}
    image: ${OPENSEARCH_SETUP_HOST}
    depends_on:
      opensearch-node:
        condition: service_healthy
    networks:
      - shared_network

  opensearch.gateway.rs:
    image: ${OPENSEARCH_GATEWAY_RS_IMAGE}
    container_name: ${OPENSEARCH_GATEWAY_RS_HOST}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/7878; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      KAFKA_HOST: ${OPENSEARCH_GATEWAY_RS_KAFKA_HOST}
      OPENSEARCH_URL: ${OPENSEARCH_GATEWAY_RS_OPENSEARCH_URL}
      ALLOWED_ORIGIN: ${ALLOWED_ORIGIN}
    depends_on:
      opensearch-node:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - ${OPENSEARCH_GATEWAY_RS_PORT}:7878
    networks:
      - shared_network

  ui.gateway:
    image: ${GATEWAY_IMAGE}
    container_name: ${GATEWAY_HOST}
    depends_on:
      grpc.proxy:
        condition: service_healthy
      # vue.ui:
      #   condition: service_healthy
      opensearch.gateway.rs:
        condition: service_started
      # adempiere.site:
      #   condition: service_started
    ports:
      - ${GATEWAY_PORT}:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/api_json_errors.conf:/etc/nginx/api_json_errors.conf
      - ./nginx/gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      #- ./keys/api_keys.conf:/etc/nginx/api_keys.conf
      # backend
      - ./nginx/upstreams/adempiere_backend.conf:/etc/nginx/api_upstreams_conf.d/adempiere_backend.conf
      - ./nginx/api/backend/:/etc/nginx/api_conf.d/backend/
      # open search
      - ./nginx/upstreams/opensearch_gateway_rs.conf:/etc/nginx/api_upstreams_conf.d/opensearch_gateway_rs.conf
      - ./nginx/api/opensearch/:/etc/nginx/api_conf.d/opensearch/
    networks:
      - shared_network


networks:
  shared_network:
    name: ${DEFAULT_NETWORK}

volumes:
  volume_postgres:
    name: ${POSTGRES_VOLUME}
  volume_opensearch:
    name: ${OPENSEARCH_VOLUME}
