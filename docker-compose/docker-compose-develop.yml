version: "3.9"

name: services-gateway-develop

services:
  postgresql.service:
    build:
      context: ${POSTGRES_CONTEXT_PATH_ON_HOST}              # Path relative to Working Directory where Dockerfile will be found
      dockerfile: ${DOCKERFILE_NAME}                         # Must exist in context. Otherwise, error. Valid only if no "image" defined.
      args:
        # ARG is used to define build-time variables, whereas ENV is used to define run-time variables.
        # ARG is not available in the final image, whereas ENV is set in the final image.
        # ARG can be overridden during the build process using the "build-arg" flag, whereas ENV cannot be overridden during the build process.
        POSTGRES_IMAGE: ${POSTGRES_IMAGE}                    # Only this is actually needed for the Dockerfile. The other args are left just in case.
        ADEMPIERE_DB_NAME: ${ADEMPIERE_DB_NAME}
        ADEMPIERE_DB_USER: ${ADEMPIERE_DB_USER}
        ADEMPIERE_DB_PASSWORD: ${ADEMPIERE_DB_PASSWORD}
        POSTGRES_DEFAULT_RESTORE_FILE: ${POSTGRES_DEFAULT_RESTORE_FILE}
        HOME_PATH_ON_CONTAINERS: ${HOME_PATH_ON_CONTAINERS}
        POSTGRES_DB_BACKUP_PATH_ON_CONTAINER: ${POSTGRES_DB_BACKUP_PATH_ON_CONTAINER}
        ADEMPIERE_GITHUB_ARTIFACT: ${ADEMPIERE_GITHUB_ARTIFACT}
        ADEMPIERE_GITHUB_COMPRESSED_FILE: ${ADEMPIERE_GITHUB_COMPRESSED_FILE}
        POSTGRES_RESTORE_FILE_NAME: ${POSTGRES_RESTORE_FILE_NAME}
    container_name: ${POSTGRES_CONTAINER_NAME}
    hostname: ${POSTGRES_HOSTNAME}
    image: ${POSTGRES_IMAGE_REPO_NAME}                        # "image" is in this context just another image RepoTag, visible with "docker image inspect" and "docker images"
                                                               # Omitting it, the Repository name will be "${COMPOSE_PROJECT_NAME}+Service name"
    restart: ${GENERIC_RESTART}
    volumes:
      - volume_postgres:${POSTGRES_DEFAULT_DB_PATH_ON_CONTAINER} # Database dir for container. Default for Postgres.
      - volume_backups:${POSTGRES_DB_BACKUP_PATH_ON_CONTAINER}   # Backup dir for container. Must be created with Dockerfile
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres && psql -U ${ADEMPIERE_DB_USER} -d ${ADEMPIERE_DB_NAME} -c 'SELECT Version FROM AD_SYSTEM'"]
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:            # Values needed for initdb.sh and debugging
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ADEMPIERE_DB_NAME: ${ADEMPIERE_DB_NAME}
      ADEMPIERE_DB_USER: ${ADEMPIERE_DB_USER}
      ADEMPIERE_DB_PASSWORD: ${ADEMPIERE_DB_PASSWORD}
      POSTGRES_DEFAULT_RESTORE_FILE: ${POSTGRES_DEFAULT_RESTORE_FILE}
      HOME_PATH_ON_CONTAINERS: ${HOME_PATH_ON_CONTAINERS}
      POSTGRES_DB_BACKUP_PATH_ON_CONTAINER: ${POSTGRES_DB_BACKUP_PATH_ON_CONTAINER}
      ADEMPIERE_GITHUB_ARTIFACT: ${ADEMPIERE_GITHUB_ARTIFACT}
      ADEMPIERE_GITHUB_COMPRESSED_FILE: ${ADEMPIERE_GITHUB_COMPRESSED_FILE}
      POSTGRES_RESTORE_FILE_NAME: ${POSTGRES_RESTORE_FILE_NAME}
      POSTGRES_EXTERNAL_PORT:  ${POSTGRES_EXTERNAL_PORT}
    ports:
      - ${POSTGRES_EXTERNAL_PORT}:${POSTGRES_PORT}          # Set a fixed external port
    networks:
      - adempiere_network



  s3.storage:
    image: ${S3_IMAGE}
    container_name: ${S3_CONTAINER_NAME}
    hostname: ${S3_HOSTNAME}
    restart: ${GENERIC_RESTART}
    command:
      - "server"
      - "/data"
      - "--console-address=:${S3_CONSOLE_PORT}"
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/9000; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    environment:
      MINIO_ROOT_USER: ${S3_USER}
      MINIO_ROOT_PASSWORD: ${S3_PASSWORD}
      # MINIO_BROWSER_REDIRECT_URL: ${S3_CONSOLE_BROWSER_REDIRECT_URL}
    volumes:
      - volume_s3:/data
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    ports:
      - ${S3_EXTERNAL_PORT}:9000
      - ${S3_CONSOLE_EXTERNAL_PORT}:${S3_CONSOLE_PORT}
    networks:
      - adempiere_network

  s3.client:
    image: ${S3_CLIENT_IMAGE}
    container_name: ${S3_CLIENT_CONTAINER_NAME}
    hostname: ${S3_CLIENT_HOSTNAME}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    depends_on:
      s3.storage:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set s3_minio_server http://s3.storage:9000 ${S3_CLIENT_ACCESS_KEY} ${S3_CLIENT_SECRET_KEY};
      /usr/bin/mc mb s3_minio_server/${S3_CLIENT_BUCKET_NAME} || true;
      exit 0;
      "
    networks:
      - adempiere_network

  s3.gateway.rs:
    image: ${S3_GATEWAY_RS_IMAGE}
    container_name: ${S3_GATEWAY_RS_CONTAINER_NAME}
    hostname: ${S3_GATEWAY_RS_HOSTNAME}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/7878; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    depends_on:
      s3.storage:
        condition: service_healthy
    environment:
      S3_URL: ${S3_GATEWAY_RS_S3_URL}
      API_KEY: ${S3_GATEWAY_RS_API_KEY}
      SECRET_KEY: ${S3_GATEWAY_RS_SECRET_KEY}
      BUCKET_NAME: ${S3_GATEWAY_RS_BUCKET_NAME}
      ALLOWED_ORIGIN: ${ALLOWED_ORIGIN}
    ports:
      - ${S3_GATEWAY_RS_EXTERNAL_PORT}:7878
    networks:
      - adempiere_network



  adempiere.grpc.server:
    image: ${VUE_BACKEND_GRPC_SERVER_IMAGE}
    container_name: ${VUE_BACKEND_GRPC_SERVER_CONTAINER_NAME}
    hostname: ${VUE_BACKEND_GRPC_SERVER_HOSTNAME}
    restart: ${GENERIC_RESTART}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/${VUE_BACKEND_GRPC_SERVER_PORT}; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    depends_on:
      postgresql.service:
        condition: service_healthy
    environment:
      SERVER_PORT: ${VUE_BACKEND_GRPC_SERVER_PORT}
      DB_HOST: ${VUE_BACKEND_GRPC_SERVER_DB_CONTAINER_NAME}
      DB_PORT: ${VUE_BACKEND_GRPC_SERVER_DB_PORT}
      DB_NAME: ${VUE_BACKEND_GRPC_SERVER_DB_NAME}
      DB_USER: ${VUE_BACKEND_GRPC_SERVER_DB_USER}
      DB_PASSWORD: ${VUE_BACKEND_GRPC_SERVER_DB_PASSWORD}
      JWT_SECRET_KEY: ${VUE_BACKEND_GRPC_SERVER_JWT_SECRET_KEY}
      # SERVICES_ENABLED: ${VUE_BACKEND_GRPC_SERVER_SERVICES_ENABLED}           # IN ADEMPIERE-ALL-SERVICES, NOT COMMENTED
      SERVER_LOG_LEVEL: ${VUE_BACKEND_GRPC_SERVER_LOG_LEVEL}
    networks:
      - adempiere_network

  grpc.proxy:
    image: ${ENVOY_GRPC_PROXY_BACKEND_IMAGE}
    container_name: ${ENVOY_GRPC_PROXY_CONTAINER_NAME}
    hostname: ${ENVOY_GRPC_PROXY_HOSTNAME}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/${ENVOY_GRPC_PROXY_BACKEND_PORT}; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    depends_on:
      - adempiere.grpc.server
    ports:
      - ${ENVOY_GRPC_PROXY_BACKEND_EXTERNAL_PORT}:${ENVOY_GRPC_PROXY_BACKEND_PORT}
    networks:
      - adempiere_network



  opensearch.node:
    image: ${OPENSEARCH_IMAGE}
    container_name: ${OPENSEARCH_CONTAINER_NAME}
    hostname: ${OPENSEARCH_HOSTNAME}
    environment:
      - node.name=opensearch.node
      - discovery.type=single-node
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/9200; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s 
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    volumes:
      - volume_opensearch:/usr/share/opensearch/data
      - ./opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - ./opensearch/snapshots:/mnt/snapshots
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    ports:
      - ${OPENSEARCH_PORT}:9200
      - ${OPENSEARCH_PERFORMANCE_PORT}:9600 # required for Performance Analyzer
    networks:
      - adempiere_network
  
  opensearch.setup:
    build:
      context: opensearch/
      dockerfile: setup.Dockerfile
    container_name: ${OPENSEARCH_SETUP_CONTAINER_NAME}
    hostname: ${OPENSEARCH_SETUP_HOSTNAME}
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    image: ${OPENSEARCH_SETUP_IMAGE_REPO_NAME}
    depends_on:
      opensearch.node:
        condition: service_healthy
    environment:
      OPENSEARCH_HOST: ${OPENSEARCH_SETUP_NODE_HOSTNAME}
    networks:
      - adempiere_network

  opensearch.dashboards:
    image: ${OPENSEARCH_DASHBOARDS_IMAGE}
    container_name: ${OPENSEARCH_DASHBOARDS_CONTAINER_NAME}
    hostname: ${OPENSEARCH_DASHBOARDS_HOSTNAME}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5601; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    depends_on:
      opensearch.node:
        condition: service_healthy
    environment:
      # OPENSEARCH_HOSTS: '["http://${OPENSEARCH_HOSTNAME}:${OPENSEARCH_PORT}"]'
      OPENSEARCH_HOSTS: ${OPENSEARCH_DASHBOARDS_OPENSEARCH_HOSTS}
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: true
    ports:
      - ${OPENSEARCH_DASHBOARDS_EXTERNAL_PORT}:5601 # Map host port 5601 to container port 5601
    networks:
      - adempiere_network

  opensearch.gateway.rs:
    image: ${OPENSEARCH_GATEWAY_RS_IMAGE}
    container_name: ${OPENSEARCH_GATEWAY_RS_CONTAINER_NAME}
    hostname: ${OPENSEARCH_GATEWAY_RS_HOSTNAME}
    restart: ${GENERIC_RESTART}
    healthcheck:
      test: "bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/7878; exit $?;'"
      interval: 10s
      retries: 60
      start_period: 20s
      timeout: 10s
    volumes:
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    environment:
      KAFKA_HOST: ${OPENSEARCH_GATEWAY_RS_KAFKA_HOST}
      OPENSEARCH_URL: ${OPENSEARCH_GATEWAY_RS_OPENSEARCH_URL}
      ALLOWED_ORIGIN: ${ALLOWED_ORIGIN}
    depends_on:
      opensearch.node:
        condition: service_healthy
    ports:
      - ${OPENSEARCH_GATEWAY_RS_EXTERNAL_PORT}:7878
    networks:
      - adempiere_network



  ui.gateway:
    image: ${NGINX_UI_GATEWAY_IMAGE}
    container_name: ${NGINX_UI_GATEWAY_CONTAINER_NAME}
    hostname: ${NGINX_UI_GATEWAY_HOSTNAME}
    depends_on:
      grpc.proxy:
        condition: service_healthy
      # vue.ui:
      #   condition: service_healthy
      opensearch.gateway.rs:
        condition: service_started
      # adempiere.site:
      #   condition: service_started
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      - ./nginx/api_json_errors.conf:/etc/nginx/api_json_errors.conf
      # backend
      - ./nginx/upstreams/adempiere_backend.conf:/etc/nginx/api_upstreams_conf.d/adempiere_backend.conf
      - ./nginx/api/backend/:/etc/nginx/api_conf.d/backend/
      # open search
      - ./nginx/upstreams/opensearch_gateway_rs.conf:/etc/nginx/api_upstreams_conf.d/opensearch_gateway_rs.conf
      - ./nginx/api/opensearch/:/etc/nginx/api_conf.d/opensearch/
      # s3
      - ./nginx/upstreams/s3_storage.conf:/etc/nginx/api_upstreams_conf.d/s3_storage.conf
      - ./nginx/upstreams/s3_console_ui.conf:/etc/nginx/api_upstreams_conf.d/s3_console_ui.conf
      - ./nginx/upstreams/s3_gateway_rs.conf:/etc/nginx/api_upstreams_conf.d/s3_gateway_rs.conf
      - ./nginx/api/s3/:/etc/nginx/api_conf.d/s3/
      #- ./keys/api_keys.conf:/etc/nginx/api_keys.conf
      # time zone
      - ${TIMEZONE_PATH_ON_HOST}:${TIMEZONE_PATH_ON_CONTAINER}:${TIMEZONE_OPTIONS}    # Map the Timezone  of the host to the Timezone of the container
      - ${LOCALTIME_PATH_ON_HOST}:${LOCALTIME_PATH_ON_CONTAINER}:${LOCALTIME_OPTIONS} # Map the Localtime of the host to the Timezone of the container
    ports:
      - ${NGINX_UI_GATEWAY_EXTERNAL_PORT}:${NGINX_UI_GATEWAY_INTERNAL_PORT}
    networks:
      - adempiere_network



networks:
  adempiere_network:
    name: ${ADEMPIERE_NETWORK}
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET}      # Set subnet for all containers created.
          gateway: ${NETWORK_GATEWAY}

volumes:
  volume_postgres:
    name: ${POSTGRES_VOLUME}
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DB_PATH_ON_HOST} # Must be created on host before calling docker compose. The persistent database will be located locally here.
  volume_backups:
    name: ${POSTGRES_BACKUPS_VOLUME}
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_BACKUP_PATH_ON_HOST} # Must be created on host before calling docker compose. Backups must be copied here to be restored.
  volume_s3:
    name: ${S3_VOLUME}
  volume_opensearch:
    name: ${OPENSEARCH_VOLUME}
